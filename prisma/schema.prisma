generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Statistics {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    totalImages   Int    @default(0)
    totalTags     Int    @default(0)
    totalRequests Int    @default(0)
}

model Image {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    isNsfw          Boolean  @default(false)
    source          String
    imgurId         String   @unique
    imgurDeleteHash String   @unique
    imgurUrl        String
    createdAt       DateTime @default(now())

    ImageTag ImageTag[]
}

model Tag {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String  @unique
    description String
    is_nsfw     Boolean @default(false)

    ImageTag ImageTag[]
}

model ImageTag {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    Image     Image    @relation(fields: [imageId], references: [id])
    imageId   String   @db.ObjectId
    Tag       Tag      @relation(fields: [tagId], references: [id])
    tagId     String   @db.ObjectId
    createdAt DateTime @default(now())
}

model User {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    email      String?  @unique
    avatar_url String?
    favorites  String[]
    created_at DateTime @default(now())

    accounts Account[]
    sessions Session[]

    @@map("users")
}

model Account {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    user_id             String  @db.ObjectId
    type                String
    provider            String
    provider_account_id String
    refresh_token       String?
    access_token        String?
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?
    session_state       String?

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([provider, provider_account_id])
    @@index([user_id])
    @@map("accounts")
}

model Session {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    session_token String   @unique
    user_id       String   @db.ObjectId
    expires       DateTime

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@map("sessions")
}
