generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Statistics {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  totalImages   Int    @default(0)
  totalTags     Int    @default(0)
  totalRequests Int    @default(0)
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  isNsfw       Boolean  @default(false)
  source       String
  imageAssetId String   @unique
  imageUrl     String   @unique
  tags         String[]
  createdAt    DateTime @default(now())
}

model Tag {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String
  is_nsfw     Boolean @default(false)
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String?  @unique
  avatar_url String?
  favorites  String[]
  is_admin   Boolean  @default(false)
  created_at DateTime @default(now())

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id             String  @db.ObjectId
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  session_token String   @unique
  user_id       String   @db.ObjectId
  expires       DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}
